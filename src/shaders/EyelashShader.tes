layout (isolines, equal_spacing) in;

in float hairW[];

patch in vec4 before;
patch in vec4 after;

//uniform mat4 transformationMatrix;
//uniform mat4 projectionMatrix;


out vec4 tangent;
out float hairWidth;

// https://en.wikipedia.org/wiki/Cubic_Hermite_spline
// Catmullâ€“Rom spline
vec4 calculate_position_on_spline(float u, vec4 p_0, vec4 m_0, vec4 p_1, vec4 m_1)
{
  float h_00 = (1.0f + 2.0f * u) * (1.0f - u) * (1.0f - u);
  float h_10 = u * (1.0f - u) * (1.0f - u);
  float h_01 = u * u * (3.0f - 2.0f * u);
  float h_11 = u * u * (u - 1.0f);
  return h_00 * p_0 + h_10 * m_0 + h_01 * p_1 + h_11 * m_1;
}

vec4 calculate_tangent_on_spline(float u, vec4 p_0, vec4 m_0, vec4 p_1, vec4 m_1)
{
  float h_00 = 6.0f * (u - 1.0f) * u;
  float h_10 = u * (3.0f * u - 4.0f) + 1.0f;
  float h_01 = -6.0f * (u - 1.0f) * u;
  float h_11 = u * (3.0f * u -  2.0f);
  return h_00 * p_0 + h_10 * m_0 + h_01 * p_1 + h_11 * m_1;
}

void main()
{
  float u = gl_TessCoord.x;
  vec4 m_0 = 0.5f * (gl_in[1].gl_Position - before);
  vec4 m_1 = 0.5f * (after - gl_in[0].gl_Position);

  vec4 pos = calculate_position_on_spline(u, gl_in[0].gl_Position, m_0, gl_in[1].gl_Position, m_1);
  vec4 tan = calculate_tangent_on_spline(u, gl_in[0].gl_Position, m_0, gl_in[1].gl_Position, m_1);
  // apply the projection, because we did not do it in the vertex shader.
  // gl_Position = projectionMatrix*transformationMatrix*pos;
  // tangent = projectionMatrix*transformationMatrix*vec4(tan.xyz, 0.0f);
  gl_Position = pos;
  tangent = vec4(tan.xyz, 0);
  hairWidth = mix(hairW[0], hairW[1], u);
}
